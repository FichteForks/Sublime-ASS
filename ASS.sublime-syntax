%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: ASS Subtitles
file_extensions:
  - ass
  - ssa
first_line_match: '(?ix)
  ^\s*\[( Script\ Info | V4\+?\ Styles | Events )\]\s*$ |
  ^\s*( Format | Style | Dialogue ):
'
scope: text.ass
contexts:

  main:
    - match: '^\\s*(#)\\s*\\b(include)\\b'
      captures:
        1: meta.preprocessor.c++
        2: keyword.control.include.c++
    - include: leadingSpace
    - include: comment
    - include: section
    - include: style
    - include: dialogue
    - include: sectionProperties
    - include: othersAreInvalid

  leadingSpace:
    - match: ^\s+

  section:
    - match: '(?i)(\[)([^\]]+)(\])\s*$'
      scope: meta.preprocessor.Section.ass
      captures:
        1: punctuation.definition.Section.begin.ass
        2: entity.name.Section.ass
        3: punctuation.definition.Section.end.ass

  sectionProperties:
    - match: '(?i)([^:]+)\s*(:)\s*(.*)$'
      captures:
        1: keyword.Section.key.ass
        2: punctuation.definition.property.ass
        3: meta.property.ass

  style:
    # ASS, Style: ...
    - match: '(?ix)
        (Style)\s*(:)\s*
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)$
      '
      captures:
        1 : keyword.Format.ass
        2 : punctuation.definition.property.ass
        3 : entity.name.function.Name.ass
        4 : punctuation.separator.ass
        5 : variable.parameter.Fontname.ass
        6 : punctuation.separator.ass
        7 : constant.numeric.Fontsize.ass
        8 : punctuation.separator.ass
        9 : string.PrimaryColour.ass
        10: punctuation.separator.ass
        11: string.SecondaryColour.ass
        12: punctuation.separator.ass
        13: string.OutlineColour.ass
        14: punctuation.separator.ass
        15: string.BackColour.ass
        16: punctuation.separator.ass
        17: constant.numeric.Bold.ass
        18: punctuation.separator.ass
        19: constant.numeric.Italic.ass
        20: punctuation.separator.ass
        21: constant.numeric.Underline.ass
        22: punctuation.separator.ass
        23: constant.numeric.StrikeOut.ass
        24: punctuation.separator.ass
        25: constant.numeric.ScaleX.ass
        26: punctuation.separator.ass
        27: constant.numeric.ScaleY.ass
        28: punctuation.separator.ass
        29: constant.numeric.Spacing.ass
        30: punctuation.separator.ass
        31: constant.numeric.Angle.ass
        32: punctuation.separator.ass
        33: constant.numeric.BorderStyle.ass
        34: punctuation.separator.ass
        35: constant.numeric.Outline.ass
        36: punctuation.separator.ass
        37: constant.numeric.Shadow.ass
        38: punctuation.separator.ass
        39: constant.numeric.Alignment.ass
        40: punctuation.separator.ass
        41: constant.numeric.MarginL.ass
        42: punctuation.separator.ass
        43: constant.numeric.MarginR.ass
        44: punctuation.separator.ass
        45: constant.numeric.MarginV.ass
        46: punctuation.separator.ass
        47: constant.numeric.Encoding.ass
    # SSA, Style: ...
    - match: '(?ix)
        (Style)\s*(:)\s*
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)$
      '
      captures:
        1 : keyword.Format.ass
        2 : punctuation.definition.property.ass
        3 : entity.name.function.Name.ass
        4 : punctuation.separator.ass
        5 : variable.parameter.Fontname.ass
        6 : punctuation.separator.ass
        7 : constant.numeric.Fontsize.ass
        8 : punctuation.separator.ass
        9 : string.PrimaryColour.ass
        10: punctuation.separator.ass
        11: string.SecondaryColour.ass
        12: punctuation.separator.ass
        13: string.TertiaryColour.ass
        14: punctuation.separator.ass
        15: string.BackColour.ass
        16: punctuation.separator.ass
        17: constant.numeric.Bold.ass
        18: punctuation.separator.ass
        19: constant.numeric.Italic.ass
        20: punctuation.separator.ass
        21: constant.numeric.BorderStyle.ass
        22: punctuation.separator.ass
        23: constant.numeric.Outline.ass
        24: punctuation.separator.ass
        25: constant.numeric.Shadow.ass
        26: punctuation.separator.ass
        27: constant.numeric.Alignment.ass
        28: punctuation.separator.ass
        29: constant.numeric.MarginL.ass
        30: punctuation.separator.ass
        31: constant.numeric.MarginR.ass
        32: punctuation.separator.ass
        33: constant.numeric.MarginV.ass
        34: punctuation.separator.ass
        35: constant.numeric.AlphaLevel.ass
        36: punctuation.separator.ass
        37: constant.numeric.Encoding.ass

  dialogue:
    - match: '(?ix)
        (Dialogue)\s*(:)\s*
        (Marked=)?
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
        ([^,]*)(,)
      '
      captures:
        1 : keyword.Format.ass
        2 : punctuation.definition.property.ass
        # 3 : text.ass # SSA, Marked=...
        4 : constant.numeric.Layer.ass
        5 : punctuation.separator.ass
        6 : constant.numeric.Start.ass
        7 : punctuation.separator.ass
        8 : constant.numeric.End.ass
        9 : punctuation.separator.ass
        10: entity.name.function.Style.ass
        11: punctuation.separator.ass
        12: string.Name.ass
        13: punctuation.separator.ass
        14: constant.numeric.MarginL.ass
        15: punctuation.separator.ass
        16: constant.numeric.MarginR.ass
        17: punctuation.separator.ass
        18: constant.numeric.MarginV.ass
        19: punctuation.separator.ass
        20: string.Effect.ass
        21: punctuation.separator.ass
      push: dialogueText

  ########################
  # some helper contexts #
  ########################

  # the Text part in a Dialogue
  dialogueText:
    - match: $
      pop: true
    # draw
    - match: '\{\\p[1248]\}.*?(\{\\p0\}|$)'
      scope: comment.draw.ass
    # broken tags (not closed)
    - match: '\{@?\\[^}]*$'
    # tags
    - match: '\{(?=@?\\)'
      push:
        - meta_scope: comment.tag.ass
        - match: '\}'
          pop: true
        # style changes
        - match: '\\r([^\\}]+)'
          captures:
            1: entity.name.function.Style.ass
        # fontname changes
        - match: '\\fn([^\\}]+)'
          captures:
            1: variable.parameter.Fontname.ass
        # fontsize changes
        - match: '\\fs([\d.]+)'
          captures:
            1: constant.numeric.Fontsize.ass
        # color changes
        - match: '(?i)\\1?c(&H[\dA-F]+&?)'
          captures:
            1: string.PrimaryColour.ass
        - match: '(?i)\\2c(&H[\dA-F]+&?)'
          captures:
            1: string.SecondaryColour.ass
        - match: '(?i)\\3c(&H[\dA-F]+&?)'
          captures:
            1: string.OutlineColour.ass
        - match: '(?i)\\4c(&H[\dA-F]+&?)'
          captures:
            1: string.BackColour.ass
    # special chars
    - match: \\n
      scope: keyword.linebreak.soft.ass
    - match: \\N
      scope: keyword.linebreak.hard.ass
    - match: \\h
      scope: keyword.space.hard.ass

  # comments
  comment:
    # comments which start with ";"
    - match: '(;).*'
      scope: comment.Comment.semicolon.ass
      captures:
        1: punctuation.definition.comment.ass
    # comments which start with "Comment:"
    - match: '(?i)Comment\s*:.*'
      scope: comment.Comment.comment.ass

  # invalid contents
  othersAreInvalid:
    - match: .+
      scope: invalid.ass
